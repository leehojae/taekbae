<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="spms.dao.MemberDao">
  <resultMap type="member" id="memberResultMap">
    <id     property="no"       column="MNO"/>
    <result property="name"     column="MNAME"/>
    <result property="id"    column="ID"/>
    <result property="tel"      column="TEL"/>
    <result property="password" column="PWD"/>
    <result property="personalNumber" column="PERSONAL_NO"/>
    <result property="rank" column="RANK"/>
    <result property="photo"    column="PHOTO"/>
    <result property="officeNum"    column="OFFICE_NUM"/>
    <result property="officeName"    column="OFFICE_NAME"/>
  </resultMap>
	
	<select id="selectList"     parameterType="int"   resultMap="memberResultMap">
		select  m.MNO,m.MNAME,m.ID,m.TEL,m.PERSONAL_NO,
		m.PHOTO,
		
					(
			            select  OFFICE_NAME from OFFICE where  OFFICE_NUM  =   m.OFFICE_NUM 
						
					) AS OFFICE_NAME,
						
						(
			            case  m.RANK
						when 1 then '시스템관리자' 
					    when 2 then '영업소관리자 '
					    when 3 then '영업소관리자 '
					    when 4 then '배송기사'
					    
					    else '기타' end
					) AS RANK
		
		
		from MEMBERS m where    m.OFFICE_NUM is not null
		and  m.OFFICE_NUM = ( 
		
		
		 SELECT   DISTINCT  m.OFFICE_NUM  FROM  OFFICE o, MEMBERS m where m.mno = #{no}
		  
		  
		     )
		;
	</select>
	
	<select id="carlessMember"     parameterType="int"   resultMap="memberResultMap">
	select t1.mno as no, t1.mname as name   ,  t1.rank as rank   , t1.ID as id  
from MEMBERS t1 left outer join CARS t2 using (MNO)
where t1.rank=4 and t1.OFFICE_NUM = (select OFFICE_num from MEMBERS where mno= #{no}) and t2.mno is null;
	
	
<!-- 		select t1.mno as no , t1.mname as name   , t1.ID as id   -->
<!-- 		from members t1 left outer join cars t2 using (MNO) -->
<!-- 		where t1.rank=4 and t1.OFFICE_NUM = (select OFFICE_num from members where mno=   #{no} ) and t2.mno is null; -->
	</select>
	
	<select id="carNessMember"     parameterType="int"   resultMap="memberResultMap">
		select t1.mno as no , t1.mname as name   , t1.ID as id  
		from MEMBERS t1 left outer join CARS t2 using (MNO)
		where t1.rank=4 and t1.OFFICE_NUM = (select OFFICE_num from MEMBERS where mno=   #{no} ) and t2.mno is not null;
	</select>
	
	<select id="selectOne" parameterType="int" resultMap="memberResultMap">
    select MNO,MNAME,ID, PWD,TEL,PERSONAL_NO,RANK,PHOTO, OFFICE_NUM
    from MEMBERS
    where MNO=#{value}
  </select>
  
  
	<select id="searchid" parameterType="String" resultMap="memberResultMap">
    select MNO,MNAME,ID, PWD,TEL,PERSONAL_NO,RANK,PHOTO, OFFICE_NUM
    from MEMBERS
    where ID=#{value}
  </select>
  
  <delete id="delete" parameterType="int">
    delete from MEMBERS where MNO=#{no}
  </delete>
  
  <insert id="insert" parameterType="member">
    INSERT INTO MEMBERS(MNAME,ID,TEL,PERSONAL_NO,PHOTO, PWD, OFFICE_NUM, RANK  ) 
    VALUES(#{name},#{id},#{tel},#{personalNumber},#{photo}       ,   #{password}  ,   #{officeNum} ,   #{rank} )
  </insert>
  
  <update id="update" parameterType="member">
    update MEMBERS set 
      MNAME=#{name}, 
      ID=#{id}, 
      TEL=#{tel}, 
      PERSONAL_NO=#{personalNumber}, 
      PHOTO=#{photo} 
    where MNO=#{no}
  </update>
  
  
  <update id="rankUpdate" parameterType="int">
    update MEMBERS set 
      RANK= 2
    where OFFICE_NUM=#{no}  and RANK= 3
  </update>
  
  <select id="selectByIdPassword" 
      parameterType="map" 
      resultMap="memberResultMap">
    select MNO,MNAME,ID,PHOTO , RANK, OFFICE_NUM
    from MEMBERS 
    where ID=#{id} and PWD=#{password}
  </select>
  
  <select id="selectListByProject" parameterType="int" 
      resultMap="memberResultMap">
    select T1.MNO, T2.MNAME, T2.PHOTO
		from PRJ_MEMS T1 left outer join MEMBERS T2
		  using (MNO)
		where T1.PNO=#{value}
		order by T2.MNAME;
  </select>
</mapper>















